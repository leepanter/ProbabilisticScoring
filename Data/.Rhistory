testStat.logLMMwREint   = 3.95
testStat.logLMMwREslope = 2.34
testStat.logGEE         = 4.002
# Calculate SE Percent Change matrix
testStat.CD34Fbln=c(testStat.loglmod,
testStat.logLMwFEint,
testStat.logLMMwREint,
testStat.logLMMwREslope,
testStat.logGEE)
(perctChange.testStatCD34Fbln=PerctChangeMatrix(testStat.CD34Fbln))
load("~/Desktop/CD19MalaWS.RData")
library(readxl)
FullVariableList <- read_excel("~/Documents/GitHub/ProbabilisticScoring/Paper/FullVariableList.xlsx",
col_names = FALSE, skip = 1)
View(FullVariableList)
## Imports the full variable list
FullVariableList <- read_excel("~/Documents/GitHub/ProbabilisticScoring/Paper/FullVariableList.xlsx",
+     col_names = FALSE, skip = 1)
FullVariableList = FullVariableList[4:289, 1:2]
View(FullVariableList)
str(FullVariableList)
save(FullVariableList, file = "FullVariableList.Rdata")
WD="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/FullData"
setwd(WD)
FullVariableList <- read_excel("~/Documents/GitHub/ProbabilisticScoring/Paper/FullVariableList.xlsx",
+     col_names = FALSE, skip = 1)
FullVariableList = FullVariableList[4:289, 1:2]
save(FullVariableList, file = "FullVariableList.Rdata")
# ImportVariableList.R
## Imports the full variable list
WD="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/FullData"
setwd(WD)
FullVariableList <- read_excel("/Users/lee/Documents/GitHub/ProbabilisticScoring/Data/FullVariableList.xlsx",
+     col_names = FALSE, skip = 1)
FullVariableList = FullVariableList[4:289, 1:2]
save(FullVariableList, file = "FullVariableList.Rdata")
View(FullVariableList)
FullVariableList <- read_excel("/Users/lee/Documents/GitHub/ProbabilisticScoring/Data/FullVariableList.xlsx",
+     col_names = FALSE, skip = 1)
WD="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/FullData"
setwd(WD)
FullVariableList <- read_excel("/Users/lee/Documents/GitHub/ProbabilisticScoring/Data/FullVariableList.xlsx",
+     col_names = FALSE, skip = 1)
library(readxl)
FullVariableList <- read_excel("~/Documents/GitHub/ProbabilisticScoring/Data/FullVariableList.xlsx")
View(FullVariableList)
# ImportVariableList.R
## Imports the full variable list
WD="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/FullData"
setwd(WD)
FullVariableList <- read_excel("~/Documents/GitHub/ProbabilisticScoring/Data/FullVariableList.xlsx")
FullVariableList = FullVariableList[4:289, 1:2]
View(FullVariableList)
colnames(FullVariableList)=c("OrVarNo", "VarName")
save(FullVariableList, file = "FullVariableList.Rdata")
# ImportVariableList.R
## Imports the full variable list
WD="/Users/lee/Documents/GitHub/ProbabilisticScoring/Data"
setwd(WD)
FullVariableList <- read_excel("~/Documents/GitHub/ProbabilisticScoring/Data/FullVariableList.xlsx")
FullVariableList = FullVariableList[4:289, 1:2]
colnames(FullVariableList)=c("OrVarNo", "VarName")
save(FullVariableList, file = "FullVariableList.Rdata")
View(FullVariableList)
WD="/Users/lee/Documents/GitHub/ProbabilisticScoring/Data"
setwd(WD)
library(readxl)
SubsetVariableList <- read_excel("SubsetVariableList.xlsx")
View(SubsetVariableList)
save(SubsetVariableList, file = "SubsetVariableList.Rdata")
WD="/Users/lee/Documents/GitHub/ProbabilisticScoring/Data"
setwd(WD)
library(readxl)
FullData <- read_excel("FullData.xlsx")
View(FullData)
View(FullData)
library(readxl)
FullData <- read_excel("FullData.xlsx", sheet = "Sheet1",
range = "A1:JZ1")
View(FullData)
read.csv(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Data/FullData.csv")
FullData=read.csv(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Data/FullData.csv")
View(FullData)
str(FullData)
WD="/Users/lee/Documents/GitHub/ProbabilisticScoring/Data"
setwd(WD)
FullData=read.csv(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Data/FullData.csv")
save(FullData, file = "FullData.Rdata")
phq9=read.csv(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Data/PHQ9subset.csv")
View(phq9)
# phq9DataSubsetImport.R
# Imports PHQ9 Data Subst from original data set
WD="/Users/lee/Documents/GitHub/ProbabilisticScoring/Data"
setwd(WD)
phq9=read.csv(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Data/PHQ9subset.csv")
save(phq9, file = "phq9.Rdata")
dat=phq9
respVector=c(resp1,
resp2,
resp3,
resp4,
resp5,
resp6,
resp7,
resp8,
resp9)
dat=phq9
resp1=dat$PHQ9_1
resp2=dat$PHQ9_2
resp3=dat$PHQ9_3
resp4=dat$PHQ9_4
resp5=dat$PHQ9_5
resp6=dat$PHQ9_6
resp7=dat$PHQ9_7
resp8=dat$PHQ9_8
resp9=dat$PHQ9_9
respVector=c(resp1,
resp2,
resp3,
resp4,
resp5,
resp6,
resp7,
resp8,
resp9)
age=dat$Age
gender=dat$Gender
# Load Packages
library(dplyr)
age=dat$Age
gender=dat$Gender
as.character.factor(0)
x=c(0,1,2,3)
as.factor(x)
x
class
class(x)
which(resp1==0)
which(resp1==1)
tot.answers=2495*9
tot.answer.single.question=2495
tot.answers=2495*9
respVector=cbind(resp1,
resp2,
resp3,
resp4,
resp5,
resp6,
resp7,
resp8,
resp9)
respTot=c()
for(i in 1:2495){
respTot[i]=sum(respVector[[i,]])
}
respTot[i]=sum(respVector[i,])
respVector=cbind(resp1,
resp2,
resp3,
resp4,
resp5,
resp6,
resp7,
resp8,
resp9)
respTot=c()
for(i in 1:2495){
respTot[i]=sum(respVector[i,])
}
dat.c0=subset(dat, respTot<7 )
dat.c0=subset(dat, respTot>=7 & respTot<10 )
dat.c1=subset(dat, respTot>=7 & respTot<10 )
dat.c1.E10=which(dat.c1$PHQ9_1==0)
barplot(respTot)
barplot(respTot, width = 5)
library(ggplot2)
dat$respTot=respTot
dat$SubjectNo=1:2495
g=ggplot(dat, aes(respTot))+
geom_density()
g
g=ggplot(dat, aes(respTot))+
geom_histogram()
g
g=ggplot(dat, aes(respTot))+
geom_histogram()+
geom_hline(yintercept = 0)
g
g=ggplot(dat, aes(respTot))+
geom_histogram(bins = 200)+
geom_hline(yintercept = 0)
g
g=ggplot(dat, aes(respTot))+
geom_histogram(bins = 100)+
geom_hline(yintercept = 0)
g
g=ggplot(dat, aes(respTot))+
geom_histogram(bins = 50)+
geom_hline(yintercept = 0)
g
min(respTot)
3*9
max(respTot)
respTot=c()
for(i in 1:2495){
respTot[i]=sum(respVector[i,1:9])
}
dat$respTot=respTot
dat$SubjectNo=1:2495
max(respTot)
min(resp1)
min(resp2)
min(resp3)
summary(resp1)
summary(resp2)
summary(resp3)
summary(resp4)
resp1=dat$PHQ9_1-1
resp2=dat$PHQ9_2-1
resp3=dat$PHQ9_3-1
resp4=dat$PHQ9_4-1
resp5=dat$PHQ9_5-1
resp6=dat$PHQ9_6-1
resp7=dat$PHQ9_7-1
resp8=dat$PHQ9_8-1
resp9=dat$PHQ9_9-1
respVector=cbind(resp1,
resp2,
resp3,
resp4,
resp5,
resp6,
resp7,
resp8,
resp9)
respTot=c()
for(i in 1:2495){
respTot[i]=sum(respVector[i,1:9])
}
dat$respTot=respTot
dat$SubjectNo=1:2495
summary(respTot)
g=ggplot(dat, aes(respTot))+
geom_histogram(bins = 50)+
geom_hline(yintercept = 0)
g
g=ggplot(dat, aes(respTot))+
geom_histogram(bins = 50)+
geom_hline(yintercept = 0)+
xlab("PHQ9 Total Score")+
ylab("Frequency")
g
g=ggplot(dat, aes(respTot))+
geom_histogram(bins = 30)+
geom_hline(yintercept = 0)+
xlab("PHQ9 Total Score")+
ylab("Frequency")
g
g=ggplot(dat, aes(respTot))+
geom_histogram(bins = 40)+
geom_hline(yintercept = 0)+
xlab("PHQ9 Total Score")+
ylab("Frequency")
g
g=ggplot(dat, aes(respTot))+
geom_histogram(bins = 50)+
geom_hline(yintercept = 0)+
xlab("PHQ9 Total Score")+
ylab("Frequency")
g
g=ggplot(dat, aes(age))+
geom_histogram()+
geom_hline(yintercept = 0)+
xlab("Age Demographics")+
ylab("Frequency")
g
g=ggplot(dat, aes(age))+
geom_histogram(bins=50)+
geom_hline(yintercept = 0)+
xlab("Age Demographics")+
ylab("Frequency")
g
g=ggplot(dat, aes(age))+
geom_histogram(bins=50)+
geom_hline(yintercept = 0)+
xlab("Age")+
ylab("Frequency")
g
response.df=data.frame(respVector)
tot.zero.response=sum(response.df$resp1==0)
tot.zero.response=length(response.df$resp1==0)
response.df=data.frame(respVector)
tot.zero.response=length(response.df$resp1==0)
tot.zero.response
View(response.df)
tot.zero.response=length(which(response.df$resp1==0))
which(response.df$resp1==0)
x=which(response.df$resp1==0)
x=response.df$resp1[which(response.df$resp1==0)]
length(response.df$resp1[which(response.df$resp1==0)])
pr.answer.0 =length(response.df$resp1[which(response.df$resp1==0)])+
length(response.df$resp2[which(response.df$resp2==0)])+
length(response.df$resp3[which(response.df$resp3==0)])+
length(response.df$resp4[which(response.df$resp4==0)])+
length(response.df$resp5[which(response.df$resp5==0)])+
length(response.df$resp6[which(response.df$resp6==0)])+
length(response.df$resp7[which(response.df$resp7==0)])+
length(response.df$resp8[which(response.df$resp8==0)])+
length(response.df$resp9[which(response.df$resp9==0)])
pr.answer.0
pr.answer.0 =(length(response.df$resp1[which(response.df$resp1==0)])+
length(response.df$resp2[which(response.df$resp2==0)])+
length(response.df$resp3[which(response.df$resp3==0)])+
length(response.df$resp4[which(response.df$resp4==0)])+
length(response.df$resp5[which(response.df$resp5==0)])+
length(response.df$resp6[which(response.df$resp6==0)])+
length(response.df$resp7[which(response.df$resp7==0)])+
length(response.df$resp8[which(response.df$resp8==0)])+
length(response.df$resp9[which(response.df$resp9==0)]))/tot.responses
# We first calculate the probability of answering a "0"
tot.responses=2495*9
response.df=data.frame(respVector)
pr.answer.0 =(length(response.df$resp1[which(response.df$resp1==0)])+
length(response.df$resp2[which(response.df$resp2==0)])+
length(response.df$resp3[which(response.df$resp3==0)])+
length(response.df$resp4[which(response.df$resp4==0)])+
length(response.df$resp5[which(response.df$resp5==0)])+
length(response.df$resp6[which(response.df$resp6==0)])+
length(response.df$resp7[which(response.df$resp7==0)])+
length(response.df$resp8[which(response.df$resp8==0)])+
length(response.df$resp9[which(response.df$resp9==0)]))/tot.responses
# Next we subset the data to non-clinically depressed individuals
dat.c0=subset(dat, respTot<7)
View(dat.c0)
# then calculate the probability that these individuals answered a zero on question one
tot.responses.test=1356*9
resp1.test=dat.co$PHQ9_1-1
resp2.test=dat.co$PHQ9_2-1
resp3.test=dat.co$PHQ9_3-1
resp4.test=dat.co$PHQ9_4-1
resp5.test=dat.co$PHQ9_5-1
resp6.test=dat.co$PHQ9_6-1
resp7.test=dat.co$PHQ9_7-1
resp8.test=dat.co$PHQ9_8-1
resp9.test=dat.co$PHQ9_9-1
resp1.test=dat.c0$PHQ9_1-1
resp2.test=dat.c0$PHQ9_2-1
resp3.test=dat.c0$PHQ9_3-1
resp4.test=dat.c0$PHQ9_4-1
resp5.test=dat.c0$PHQ9_5-1
resp6.test=dat.c0$PHQ9_6-1
resp7.test=dat.c0$PHQ9_7-1
resp8.test=dat.c0$PHQ9_8-1
resp9.test=dat.c0$PHQ9_9-1
respVector=cbind(resp1.test,
resp2.test,
resp3.test,
resp4.test,
resp5.test,
resp6.test,
resp7.test,
resp8.test,
resp9.test)
respVector.test=cbind(resp1.test,
resp2.test,
resp3.test,
resp4.test,
resp5.test,
resp6.test,
resp7.test,
resp8.test,
resp9.test)
response.test.df=data.frame(respVector.test)
respVector.test=cbind(resp1.test,
resp2.test,
resp3.test,
resp4.test,
resp5.test,
resp6.test,
resp7.test,
resp8.test,
resp9.test)
response.test.df=data.frame(respVector.test)
pr.answer.0.test =(length(response.test.df$resp1.test[which(response.test.df$resp1.test==0)])+
length(response.test.df$resp2.test[which(response.test.df$resp2.test==0)])+
length(response.test.df$resp3.test[which(response.test.df$resp3.test==0)])+
length(response.test.df$resp4.test[which(response.test.df$resp4.test==0)])+
length(response.test.df$resp5.test[which(response.test.df$resp5.test==0)])+
length(response.test.df$resp6.test[which(response.test.df$resp6.test==0)])+
length(response.test.df$resp7.test[which(response.test.df$resp7.test==0)])+
length(response.test.df$resp8.test[which(response.test.df$resp8.test==0)])+
length(response.test.df$resp9.test[which(response.test.df$resp9.test==0)]))/tot.responses.test
pr.answer.0.test
tot.responses.test
tot.responses.test=1356*9
resp1.test=dat.c0$PHQ9_1-1
resp2.test=dat.c0$PHQ9_2-1
resp3.test=dat.c0$PHQ9_3-1
resp4.test=dat.c0$PHQ9_4-1
resp5.test=dat.c0$PHQ9_5-1
resp6.test=dat.c0$PHQ9_6-1
resp7.test=dat.c0$PHQ9_7-1
resp8.test=dat.c0$PHQ9_8-1
resp9.test=dat.c0$PHQ9_9-1
respVector.test=cbind(resp1.test,
resp2.test,
resp3.test,
resp4.test,
resp5.test,
resp6.test,
resp7.test,
resp8.test,
resp9.test)
response.test.df=data.frame(respVector.test)
pr.answer.0.test =(length(response.test.df$resp1.test[which(response.test.df$resp1.test==0)])+
length(response.test.df$resp2.test[which(response.test.df$resp2.test==0)])+
length(response.test.df$resp3.test[which(response.test.df$resp3.test==0)])+
length(response.test.df$resp4.test[which(response.test.df$resp4.test==0)])+
length(response.test.df$resp5.test[which(response.test.df$resp5.test==0)])+
length(response.test.df$resp6.test[which(response.test.df$resp6.test==0)])+
length(response.test.df$resp7.test[which(response.test.df$resp7.test==0)])+
length(response.test.df$resp8.test[which(response.test.df$resp8.test==0)])+
length(response.test.df$resp9.test[which(response.test.df$resp9.test==0)]))/tot.responses.test
# EDAphq9.R
# This script performs some basic analysis on the PHQ9 responses
# NOTE: PLEASE RUN phq9DataSubsetImport.R
# Which can be found in the following directory:
#  /Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/PHQ9/phq9DataSubsetImport.R
# Load Packages
library(dplyr)
library(ggplot2)
dat=phq9
resp1=dat$PHQ9_1-1
resp2=dat$PHQ9_2-1
resp3=dat$PHQ9_3-1
resp4=dat$PHQ9_4-1
resp5=dat$PHQ9_5-1
resp6=dat$PHQ9_6-1
resp7=dat$PHQ9_7-1
resp8=dat$PHQ9_8-1
resp9=dat$PHQ9_9-1
respVector=cbind(resp1,
resp2,
resp3,
resp4,
resp5,
resp6,
resp7,
resp8,
resp9)
respTot=c()
for(i in 1:2495){
respTot[i]=sum(respVector[i,1:9])
}
dat$respTot=respTot
dat$SubjectNo=1:2495
g=ggplot(dat, aes(respTot))+
geom_histogram(bins = 50)+
geom_hline(yintercept = 0)+
xlab("PHQ9 Total Score")+
ylab("Frequency")
g
age=dat$Age
g=ggplot(dat, aes(age))+
geom_histogram(bins=50)+
geom_hline(yintercept = 0)+
xlab("Age")+
ylab("Frequency")
g
gender=dat$Gender
as.factor(gender)
dat$gender.factor=gender
g=ggplot(dat, aes(x=gender.factor, y=respTot))+
geom_violin(fill=gender.factor)
gender=dat$Gender
gender=as.factor(gender)
dat$gender.factor=gender
g=ggplot(dat, aes(x=gender.factor, y=respTot))+
geom_violin(fill=gender.factor)
g=ggplot(dat, aes(x=gender.factor, y=respTot))+
geom_violin(fill=gender.factor)
gender=dat$Gender
gender=as.factor(gender)
dat$gender.factor=gender
View(dat)
g=ggplot(dat, aes(x=gender.factor, y=respTot))+
geom_violin()
g
g=ggplot(dat, aes(x=gender.factor, y=respTot))+
geom_violin(na.rm = TRUE)
g
g=ggplot(dat, aes(x=gender.factor, y=respTot, color=gender.factor))+
geom_violin(na.rm = TRUE)
g
g=ggplot(dat, aes(x=gender.factor, y=respTot, fill=gender.factor))+
geom_violin(na.rm = TRUE)
g
g=ggplot(dat, aes(x=gender.factor, y=respTot, fill=gender.factor))+
geom_violin(na.rm = TRUE)+
xlab("gender label")+
ylab("Total Response")
g
g=ggplot(dat, aes(x=gender.factor, y=respTot, fill=gender.factor))+
geom_violin(na.rm = TRUE)+
xlab("gender label")+
ylab("Response Total")
g
g=ggplot(dat, aes(x=gender.factor, y=respTot, fill=gender.factor))+
geom_violin()+
xlab("gender label")+
ylab("Response Total")
g
