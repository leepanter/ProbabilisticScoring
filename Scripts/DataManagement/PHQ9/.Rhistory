# PHQ9 Data
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/PHQ9/phq9DataSubsetImport.R")
# source(file = "phq9DataSubsetImport.R")
# Variable Dependencies:
set.seed(123)
options(warn = -1)
## File Dependencies
# CVInitialSetup.R
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/CVInitialSetups.R")
# source(file="CVInitialSetups.R")
## functions:
# Weight Calculations
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionsWeightCalculations.R")
# source(file = "functionsWeightCalculations.R")
# Probabilistic Score Calculations
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionsProbScoreCalc.R")
# source(file = "functionsProbScoreCalc.R")
# Scoring Analysis
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionsScoringAnalysis.R")
# source(file="functionsScoringAnalysis.R")
#-------------------------------------------------------------------------#
####	Begin Script	 ####
#-------------------------------------------------------------------------#
# load data
dat=phq9
dat.kmeans=dat[,4:12]
set.seed(123)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
dat.som=scale(dat.kmeans)
#-------------------------------------------------------------------------#
set.seed(123)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
#-------------------------------------------------------------------------#
set.seed(1)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
for(i in 1:10)
for(i in 1:10)
set.seed(3)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
set.seed(4)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
set.seed(4)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
# kmeansPscore.R
#-------------------------------------------------------------------------#
####	Description:	 ####
# This script will generate a clustering of the PHQ9 data using a K-means approach.  It will produce three clusters that will then be ordered according to the depression classification ranking based on empirical properties of the clusters.
####	Script Dependencies	 ####
# Package Dependencies:
library(factoextra)
library(tidyverse)
library(cluster)
library(dendextend)
library(ggplot2)
packageurl <- "https://cran.r-project.org/src/contrib/Archive/kohonen/kohonen_2.0.19.tar.gz"
install.packages(packageurl, repos = NULL, type = "source")
library(kohonen)
# Set Working Directory
WD="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis"
# WD="/home/lpanter/PScoreUpdate1/GCloudUpdate"
setwd(WD)
# Data Dependencies:
# PHQ9 Data
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/PHQ9/phq9DataSubsetImport.R")
# source(file = "phq9DataSubsetImport.R")
# Variable Dependencies:
set.seed(123)
options(warn = -1)
## File Dependencies
# CVInitialSetup.R
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/CVInitialSetups.R")
# source(file="CVInitialSetups.R")
## functions:
# Weight Calculations
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionsWeightCalculations.R")
# source(file = "functionsWeightCalculations.R")
# Probabilistic Score Calculations
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionsProbScoreCalc.R")
# source(file = "functionsProbScoreCalc.R")
# Scoring Analysis
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionsScoringAnalysis.R")
# source(file="functionsScoringAnalysis.R")
#-------------------------------------------------------------------------#
####	Begin Script	 ####
#-------------------------------------------------------------------------#
# load data
dat=phq9
dat.kmeans=dat[,4:12]
dat.som=scale(dat.kmeans)
set.seed(4)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
dat.som=scale(dat.kmeans)
set.seed(5)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
dat.som=scale(dat.kmeans)
set.seed(6)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
dat.som=scale(dat.kmeans)
set.seed(7)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
dat.som=scale(dat.kmeans)
set.seed(8)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
dat.som=scale(dat.kmeans)
set.seed(9)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
dat.som=scale(dat.kmeans)
set.seed(3)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
dat.som=scale(dat.kmeans)
set.seed(11)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
dat.som=scale(dat.kmeans)
set.seed(12)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
dat.som=scale(dat.kmeans)
set.seed(13)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
dat.som=scale(dat.kmeans)
set.seed(14)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
dat.som=scale(dat.kmeans)
set.seed(222)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
dat.som=scale(dat.kmeans)
set.seed(221)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
dat.som=scale(dat.kmeans)
set.seed(220)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
dat.som=scale(dat.kmeans)
set.seed(219)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
som.out=som(dat.som, grid = out.grid)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
#-------------------------------------------------------------------------#
#good seeds: 3
dat.som=scale(dat.kmeans)
set.seed(123)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid, rlen=1000)
plot(som.out, type = 'changes')
plot(som.out)
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
#-------------------------------------------------------------------------#
#good seeds: 3
dat.som=scale(dat.kmeans)
set.seed(123)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid, rlen=5000, n.hood = "square")
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
#-------------------------------------------------------------------------#
#good seeds: 3
dat.som=scale(dat.kmeans)
set.seed(123)
som.out=som(dat.som, grid = out.grid,
rlen=2500,
n.hood = "square",
toroidal = TRUE)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
#-------------------------------------------------------------------------#
#good seeds: 3
dat.som=scale(dat.kmeans)
set.seed(3)
out.grid=somgrid(xdim = 10, ydim= 10, topo = "rectangular")
som.out=som(dat.som, grid = out.grid,
rlen=1000)
plot(som.out, type = 'changes')
plot(som.out)
plot(som.out, type = 'mapping')
plot(som.out, type = 'count')
plot(som.out, type = 'dist.neighbours')
plot(som.out, type = 'codes')
plot(som.out, type = 'quality')
dat$somOut.108=som.out$unit.classif
somOut.108=som.out$unit.classif
plot(hclust(dist(som.out$codes)))
class.cuts=cutree(hclust(dist(som.out$codes)),3)
plot(som.out, type = 'codes', bgcol = rainbow(3)[class.cuts])
add.cluster.boundaries(som.out, class.cuts)
mydata <- som.out$codes
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
plot(wss)
