####	MasterCVanalysis.R	 ####
#-------------------------------------------------------------------------#
####	Description:	 ####
# This script will combine the constituent functions, data, and variables needed in order to perform a cross-validation examination of Probabilistic Scoring.
####	Script Dependencies	 ####
# Package Dependencies:
# Set Working Directory
WD="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis"
setwd(WD)
# Data Dependencies:
# PHQ9 Data
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/PHQ9/phq9DataSubsetImport.R")
# Variable Dependencies:
set.seed(123)
# File Dependencies
## function: CVsplit(mydat, n.sets) ##
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/PHQ9/functionCVsplit.R")
## function: Peval(dat.in, qNum, respNum, qName) ##
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionPeval.R")
## function: PCVeval(dat.in, N.PCV.obs)
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionPCVeval.R")
## function: PCeval_overQnum(dat.in, Qnum, Qstring) ##
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionPCVeval_overQnum.R")
## function: ReformatWeights(in.list)
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionReformatWeights.R")
#-------------------------------------------------------------------------#
####	Begin Script	 ####
#-------------------------------------------------------------------------#
#### full data weight calculations	 ####
full.data=phq9Subset
full.data.weights=ReformatWeights(PCVeval_overQnum(full.data))
for(i in 1:3){
full.data.weights[[i]]=round(full.data.weights[[i]], digits = 4)
}
View(full.data.weights)
full.data.weights[[1]]
full.data.weights[[2]]
full.data.weights[[3]]
dat.in=full.data
qNum=1
respNum=0
qName=Qstring[1]
low.thresh=7
high.thresh=10
# Figure out which columns correspond to answers to qNum
index.qNum=which(colnames(dat.in)==qName)
qDat=dat.in[,index.qNum]
# Calculate P(E_j) for j=0,1,2,3
PErespNum=length(which(qDat==respNum))/2495
# Indices in dat.in classified as C1
PC1=length(which(dat.in$qTot<low.thresh & qDat==respNum))
# Calculate Number of people in C1
C1.total=length(which(dat.in$qTot<low.thresh))
PrPc1=PC1/C1.total
# Indices in dat.in classified as C2
PC2=length(which(low.thresh<=dat.in$qTot & dat.in$qTot<high.thresh & qDat==respNum))
# Calculate Number of people in C2
C2.total=length(which(low.thresh<=dat.in$qTot & dat.in$qTot<high.thresh))
PrPc2=PC2/C2.total
# Indices in dat.in classified as C3
PC3=length(which(dat.in$qTot >= high.thresh & qDat==respNum))
# Calculate Number of people in C3
C3.total=length(which(dat.in$qTot >= high.thresh ))
PrPc3=PC3/C3.total
ret1=PrPc1/PqRespNum
ret2=PrPc2/PqRespNum
ret3=PrPc3/PqRespNum
ret1=PrPc1/PErespNum
ret2=PrPc2/PErespNum
ret3=PrPc3/PErespNum
out=c(ret1, ret2, ret3)
####	MasterCVanalysis.R	 ####
#-------------------------------------------------------------------------#
####	Description:	 ####
# This script will combine the constituent functions, data, and variables needed in order to perform a cross-validation examination of Probabilistic Scoring.
####	Script Dependencies	 ####
# Package Dependencies:
# Set Working Directory
WD="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis"
setwd(WD)
# Data Dependencies:
# PHQ9 Data
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/PHQ9/phq9DataSubsetImport.R")
# Variable Dependencies:
set.seed(123)
# File Dependencies
## function: CVsplit(mydat, n.sets) ##
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/PHQ9/functionCVsplit.R")
## function: Peval(dat.in, qNum, respNum, qName) ##
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionPeval.R")
## function: PCVeval(dat.in, N.PCV.obs)
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionPCVeval.R")
## function: PCeval_overQnum(dat.in, Qnum, Qstring) ##
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionPCVeval_overQnum.R")
## function: ReformatWeights(in.list)
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionReformatWeights.R")
#-------------------------------------------------------------------------#
####	Begin Script	 ####
#-------------------------------------------------------------------------#
full.data=phq9Subset
full.data.weights=ReformatWeights(PCVeval_overQnum(full.data))
for(i in 1:3){
full.data.weights[[i]]=round(full.data.weights[[i]], digits = 4)
}
View(full.data.weights)
full.data.weights[[1]][["A0"]]
full.data.weights[[1]]
full.data.weights[[1]][["A0"]]
full.data.weights[[2]]
full.data.weights[[3]]
####	Example CV calculation with n.set=50 ####
n.set.CVsplit=CVsplit(phq9Subset, 50)
train.set.list=n.set.CVsplit[[1]]
test.set.list=n.set.CVsplit[[2]]
View(train.set.list)
train.set.weights=list()
for(i in 1:3){
train.set.weights[[i]]=round(ReformatWeights(PCVeval_overQnum(train.set.list[[1]]))[[i]], digits = 4)
}
View(train.set.weights)
train.set.weights[[1]]
View(test.set.list)
test.set.list[[1]]
test.set.subject1.sequence=test.set.list[[1]]
View(test.set.subject1.sequence)
test.set.subject1.sequence=test.set.list[[1]][1,4:12]
subject.1.class.prob=c(1/3,1/3,1/3)
subject.1.class.prob0=c(1/3,1/3,1/3)
subject.1.class.prob.t0=c(1/3,1/3,1/3)
test.set.list[[1]]
train.set.weights[[1]]
rownames(train.set.weights[[1]])
####	MasterCVanalysis.R	 ####
#-------------------------------------------------------------------------#
####	Description:	 ####
# This script will combine the constituent functions, data, and variables needed in order to perform a cross-validation examination of Probabilistic Scoring.
####	Script Dependencies	 ####
# Package Dependencies:
# Set Working Directory
WD="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis"
setwd(WD)
# Data Dependencies:
# PHQ9 Data
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/PHQ9/phq9DataSubsetImport.R")
# Variable Dependencies:
set.seed(123)
# File Dependencies
## function: CVsplit(mydat, n.sets) ##
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/PHQ9/functionCVsplit.R")
## function: Peval(dat.in, qNum, respNum, qName) ##
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionPeval.R")
## function: PCVeval(dat.in, N.PCV.obs)
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionPCVeval.R")
## function: PCeval_overQnum(dat.in, Qnum, Qstring) ##
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionPCVeval_overQnum.R")
## function: ReformatWeights(in.list)
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionReformatWeights.R")
#-------------------------------------------------------------------------#
####	Begin Script	 ####
#-------------------------------------------------------------------------#
#### full data weight calculations	 ####
full.data=phq9Subset
full.data.weights=ReformatWeights(PCVeval_overQnum(full.data))
for(i in 1:3){
full.data.weights[[i]]=round(full.data.weights[[i]], digits = 4)
}
####	Example CV calculation with n.set=50 ####
n.set.CVsplit=CVsplit(phq9Subset, 50)
train.set.list=n.set.CVsplit[[1]]
test.set.list=n.set.CVsplit[[2]]
train.set.weights=list()
for(i in 1:3){
train.set.weights[[i]]=round(ReformatWeights(PCVeval_overQnum(train.set.list[[1]]))[[i]], digits = 4)
}
test.set.subject1.sequence=test.set.list[[1]][1,4:12]
subject.1.class.prob.t0=c(1/3,1/3,1/3)
which()
#-------------------------------------------------------------------------#
####	End Script	 ####
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
#####	Post-Script	#####
####  Notes:
####  Compilation Errors:
####  Execution Errors:
####  Next Scripts to Consider:
#-------------------------------------------------------------------------#
View(train.set.weights)
train.set.weights[[1]]
class(test.set.subject1.sequence[1])
View(test.set.subject1.sequence)
test.set.subject1.sequence=as.vector(test.set.list[[1]][1,4:12])
test.set.subject1.sequence=as.vector(test.set.list[[1]][1,4:12])
class(test.set.subject1.sequence)
class(test.set.subject1.sequence[1,1])
test.set.subject1.sequence=test.set.list[[1]][1,4:12]
class(test.set.subject1.sequence[1,1])
weight.col.index=which(Anum==test.set.subject1.sequence[1,1])
weight.col.index
View(train.set.weights)
train.set.weights[[1]]
subject.1.class.prob.t1 =
c(subject.1.class.prob.t0[1]*train.set.weights[[1]][1,weight.col.index],
subject.1.class.prob.t0[2]*train.set.weights[[2]][1,weight.col.index],
subject.1.class.prob.t0[3]*train.set.weights[[3]][1,weight.col.index])
subject.1.class.prob.t1
View(test.set.subject1.sequence)
weight.col.index.t0=which(Anum==test.set.subject1.sequence[1,1])
subject.1.class.prob.t1 =
c(subject.1.class.prob.t0[1]*train.set.weights[[1]][1,weight.col.index.t0],
subject.1.class.prob.t0[2]*train.set.weights[[2]][1,weight.col.index.t0],
subject.1.class.prob.t0[3]*train.set.weights[[3]][1,weight.col.index.t0])
weight.col.index.t1=which(Anum==test.set.subject1.sequence[1,2])
weight.col.index.t1
subject.1.class.prob.t3 =
c(subject.1.class.prob.t1[1]*train.set.weights[[1]][2,weight.col.index.t0],
subject.1.class.prob.t1[2]*train.set.weights[[2]][2,weight.col.index.t0],
subject.1.class.prob.t1[3]*train.set.weights[[3]][2,weight.col.index.t0])
subject.1.class.prob.t3
train.set.weights[[1]]
train.set.weights[[2]]
train.set.weights[[3]]
View(train.set.weights[[3]])
View(train.set.weights[[2]])
View(train.set.weights[[1]])
subject.1.class.prob.t2 =
c(subject.1.class.prob.t1[1]*train.set.weights[[1]][2,weight.col.index.t0],
subject.1.class.prob.t1[2]*train.set.weights[[2]][2,weight.col.index.t0],
subject.1.class.prob.t1[3]*train.set.weights[[3]][2,weight.col.index.t0])
weight.col.index.t1=which(Anum==test.set.subject1.sequence[1,2])
subject.1.class.prob.t2 =
c(subject.1.class.prob.t1[1]*train.set.weights[[1]][2,weight.col.index.t1],
subject.1.class.prob.t1[2]*train.set.weights[[2]][2,weight.col.index.t1],
subject.1.class.prob.t1[3]*train.set.weights[[3]][2,weight.col.index.t1])
weight.col.index.t2=which(Anum==test.set.subject1.sequence[1,3])
subject.1.class.prob.t3 =
c(subject.1.class.prob.t1[1]*train.set.weights[[1]][3,weight.col.index.t2],
subject.1.class.prob.t1[2]*train.set.weights[[2]][3,weight.col.index.t2],
subject.1.class.prob.t1[3]*train.set.weights[[3]][3,weight.col.index.t2])
subject.1.class.prob.t3
weight.col.index.t2=which(Anum==test.set.subject1.sequence[1,3])
subject.1.class.prob.t3 =
c(subject.1.class.prob.t2[1]*train.set.weights[[1]][3,weight.col.index.t2],
subject.1.class.prob.t2[2]*train.set.weights[[2]][3,weight.col.index.t2],
subject.1.class.prob.t2[3]*train.set.weights[[3]][3,weight.col.index.t2])
subject.1.class.prob.t3
(subject.1.class.prob.t4 =
c(subject.1.class.prob.t3[1]*train.set.weights[[1]][4,weight.col.index.t3],
subject.1.class.prob.t3[2]*train.set.weights[[2]][4,weight.col.index.t3],
subject.1.class.prob.t3[3]*train.set.weights[[3]][4,weight.col.index.t3]))
subject.1.class.prob.t4 =
c(subject.1.class.prob.t3[1]*train.set.weights[[1]][4,weight.col.index.t3],
subject.1.class.prob.t3[2]*train.set.weights[[2]][4,weight.col.index.t3],
subject.1.class.prob.t3[3]*train.set.weights[[3]][4,weight.col.index.t3])
weight.col.index.t3=which(Anum==test.set.subject1.sequence[1,4])
(subject.1.class.prob.t4 =
c(subject.1.class.prob.t3[1]*train.set.weights[[1]][4,weight.col.index.t3],
subject.1.class.prob.t3[2]*train.set.weights[[2]][4,weight.col.index.t3],
subject.1.class.prob.t3[3]*train.set.weights[[3]][4,weight.col.index.t3]))
weight.col.index.t4=which(Anum==test.set.subject1.sequence[1,5])
(subject.1.class.prob.t5 =
c(subject.1.class.prob.t4[1]*train.set.weights[[1]][5,weight.col.index.t4],
subject.1.class.prob.t4[2]*train.set.weights[[2]][5,weight.col.index.t4],
subject.1.class.prob.t4[3]*train.set.weights[[3]][5,weight.col.index.t4]))
weight.col.index.t5=which(Anum==test.set.subject1.sequence[1,6])
(subject.1.class.prob.t6 =
c(subject.1.class.prob.t5[1]*train.set.weights[[1]][6,weight.col.index.t5],
subject.1.class.prob.t5[2]*train.set.weights[[2]][6,weight.col.index.t5],
subject.1.class.prob.t5[3]*train.set.weights[[3]][6,weight.col.index.t5]))
weight.col.index.t6=which(Anum==test.set.subject1.sequence[1,7])
(subject.1.class.prob.t7 =
c(subject.1.class.prob.t6[1]*train.set.weights[[1]][7,weight.col.index.t6],
subject.1.class.prob.t6[2]*train.set.weights[[2]][7,weight.col.index.t6],
subject.1.class.prob.t6[3]*train.set.weights[[3]][7,weight.col.index.t6]))
weight.col.index.t7=which(Anum==test.set.subject1.sequence[1,8])
(subject.1.class.prob.t8 =
c(subject.1.class.prob.t7[1]*train.set.weights[[1]][8,weight.col.index.t7],
subject.1.class.prob.t7[2]*train.set.weights[[2]][8,weight.col.index.t7],
subject.1.class.prob.t7[3]*train.set.weights[[3]][8,weight.col.index.t7]))
weight.col.index.t8=which(Anum==test.set.subject1.sequence[1,9])
(subject.1.class.prob.t9 =
c(subject.1.class.prob.t8[1]*train.set.weights[[1]][9,weight.col.index.t8],
subject.1.class.prob.t8[2]*train.set.weights[[2]][9,weight.col.index.t8],
subject.1.class.prob.t8[3]*train.set.weights[[3]][9,weight.col.index.t8]))
scale(subject.1.class.prob.t9)
scale(subject.1.class.prob.t9, scale = T)
mean.subject.1.class.prob.t9=mean(subject.1.class.prob.t9)
range.subject.1.class.prob.t9=max(subject.1.class.prob.t9)-min(subject.1.class.prob.t9)
subject.1.class.prob.t9[1]=(subject.1.class.prob.t9-mean.subject.1.class.prob.t9)/range.subject.1.class.prob.t9
subject.1.class.prob.t9[1]=(subject.1.class.prob.t9[1]-mean.subject.1.class.prob.t9)/range.subject.1.class.prob.t9
subject.1.class.prob.t9[2]=(subject.1.class.prob.t9[2]-mean.subject.1.class.prob.t9)/range.subject.1.class.prob.t9
subject.1.class.prob.t9[3]=(subject.1.class.prob.t9[3]-mean.subject.1.class.prob.t9)/range.subject.1.class.prob.t9
subject.1.class.prob.t9
####	SequenceFunctions.R	 ####
####	Description:	 ####
####	Description:	 ####
# This script will define the following functions that will evaluate a subjects answer for a probabilistic fit.
#-------------------------------------------------------------------------#
####   Generalizes over training/test data pairings
## EvalSeqData=function(?)
####  Generalizes over multiple subjects in a single test/train pairing
## EvalSeqSubjec=function(train.weights.in, test.data.in, set.no)
####	Evaluates sequence for classification convergence for one subject in a single train/test pairing
## EvalSeq=function(train.weights.in, test.data.in, set.no, subject.no)
#-------------------------------------------------------------------------#
####	Script Dependencies	 ####
# Package Dependencies:
# Set Working Directory
WD="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis"
setwd(WD)
# Data Dependencies:
# PHQ9 Data
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/PHQ9/phq9DataSubsetImport.R")
# Variable Dependencies:
set.seed(123)
# File Dependencies
## function: CVsplit(mydat, n.sets) ##
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/PHQ9/functionCVsplit.R")
## function: Peval(dat.in, qNum, respNum, qName) ##
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionPeval.R")
## function: PCVeval(dat.in, N.PCV.obs)
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionPCVeval.R")
## function: PCeval_overQnum(dat.in, Qnum, Qstring) ##
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionPCVeval_overQnum.R")
## function: ReformatWeights(in.list)
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionReformatWeights.R")
CVdat=CVsplit(phq9Subset, N.set = 50)
View(CVdat)
View(CVdat[[1]][[1]])
train.weights.in=list()
for(i in 1:3){
train.weights.in[[i]]=round(ReformatWeights(PCVeval_overQnum(CVdat[[1]][[5]]))[[i]], digits = 4)
}
test.data.in = CVdat[[2]][[5]]
set.no.in = 5
subject.no.in = 20
init.train.weights.in=train.weights.in
init.test.data.in=test.data.in
init.set.no.in=set.no.in
init.subject.no.in=subject.no.in
sub.Prob.sequence=list()
sub.Prob.sequence[[1]]=c(1/3,1/3,1/3)
sub.answer.sequence=init.test.data.in[[init.set.no.in]][init.subject.no.in, 4:12]
View(init.test.data.in)
sub.answer.sequence=init.test.data.in[init.subject.no.in, 4:12]
View(sub.answer.sequence)
weight.col.index=which(Anum==sub.answer.sequence[1,4:12])
weight.col.index=which(Anum==sub.answer.sequence[1,4])
weight.col.index
weight.col.index=c()
for(i in 1:9){
weight.col.index[i]=which(Anum==sub.answer.sequence[1,i+3])
}
for(i in 1:9){
weight.col.index[i]=which(Anum==sub.answer.sequence[1,i])
}
weight.col.index
View(init.train.weights.in)
View(init.train.weights.in[[1]])
sub.Prob.sequence[[1]][1]
for(i in 2:9){
sub.Prob.sequence[[i]]=c(
sub.Prob.sequence[[i-1]][1]*init.train.weights.in[[1]][1,weight.col.index[i-1]],
sub.Prob.sequence[[i-1]][1]*init.train.weights.in[[2]][1,weight.col.index[i-1]],
sub.Prob.sequence[[i-1]][1]*init.train.weights.in[[3]][1,weight.col.index[i-1]])
}
View(sub.Prob.sequence)
####	SequenceFunctions.R	 ####
####	Description:	 ####
####	Description:	 ####
# This script will define the following functions that will evaluate a subjects answer for a probabilistic fit.
#-------------------------------------------------------------------------#
####   Generalizes over training/test data pairings
## EvalSeqData=function(?)
####  Generalizes over multiple subjects in a single test/train pairing
## EvalSeqSubjec=function(train.weights.in, test.data.in, set.no)
####	Evaluates sequence for classification convergence for one subject in a single train/test pairing
## EvalSeq=function(train.weights.in, test.data.in, set.no, subject.no)
#-------------------------------------------------------------------------#
####	Script Dependencies	 ####
# Package Dependencies:
# Set Working Directory
WD="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis"
setwd(WD)
# Data Dependencies:
# PHQ9 Data
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/PHQ9/phq9DataSubsetImport.R")
# Variable Dependencies:
set.seed(123)
# File Dependencies
## function: CVsplit(mydat, n.sets) ##
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/DataManagement/PHQ9/functionCVsplit.R")
## function: Peval(dat.in, qNum, respNum, qName) ##
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionPeval.R")
## function: PCVeval(dat.in, N.PCV.obs)
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionPCVeval.R")
## function: PCeval_overQnum(dat.in, Qnum, Qstring) ##
source(file = "/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionPCVeval_overQnum.R")
## function: ReformatWeights(in.list)
source(file="/Users/lee/Documents/GitHub/ProbabilisticScoring/Scripts/cvAnalysis/functionReformatWeights.R")
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
####	Evaluates sequence for classification convergence for one subject in a single train/test pairing
## EvalSeq=function(train.weights.in, test.data.in, set.no.in, subject.no.in)
EvalSeq=function(train.weights.in, test.data.in, set.no.in, subject.no.in){
init.train.weights.in=train.weights.in
init.test.data.in=test.data.in
init.set.no.in=set.no.in
init.subject.no.in=subject.no.in
sub.Prob.sequence=list()
sub.Prob.sequence[[1]]=c(1/3,1/3,1/3)
sub.answer.sequence=init.test.data.in[init.subject.no.in, 4:12]
for(i in 1:9){
weight.col.index[i]=which(Anum==sub.answer.sequence[1,i])
}
for(i in 2:9){
sub.Prob.sequence[[i]]=c(
sub.Prob.sequence[[i-1]][1]*init.train.weights.in[[1]][1,weight.col.index[i-1]],
sub.Prob.sequence[[i-1]][2]*init.train.weights.in[[2]][1,weight.col.index[i-1]],
sub.Prob.sequence[[i-1]][3]*init.train.weights.in[[3]][1,weight.col.index[i-1]])
}
return(sub.Prob.sequence)
}
####  Generalizes over multiple subjects in a single test/train pairing
## EvalSeqSubject=function(train.weights.in, test.data.in, set.no.in)
EvalSeqSubject=function(train.weights.in, test.data.in, set.no.in){
init.train.weights.in.EvalSeqSubject=train.weights.in
init.test.data.in.EvalSeqSubject=test.data.in
init.set.no.in.EvalSeqSubject=set.no.in
row.dim=dim(init.test.data.in.EvalSeqSubject)[1]
Eval.Subjects.Prob.sequence=list()
for(i in 1:row.dim){
Eval.Subjects.Prob.sequence[[i]]=EvalSeq(init.train.weights.in.EvalSeqSubject,
init.test.data.in.EvalSeqSubject,
init.set.no.in.EvalSeqSubject,
i)
}
return(Eval.Subjects.Prob.sequence)
}
CVdat=CVsplit(phq9Subset, N.set = 50)
train.weights.in=list()
for(i in 1:3){
train.weights.in[[i]]=round(ReformatWeights(PCVeval_overQnum(CVdat[[1]][[5]]))[[i]], digits = 4)
}
View(CVdat)
test.data.in = CVdat[[2]][[5]]
set.no.in = 5
View(train.weights.in)
init.train.weights.in.EvalSeqSubject=train.weights.in
init.test.data.in.EvalSeqSubject=test.data.in
init.set.no.in.EvalSeqSubject=set.no.in
row.dim=dim(init.test.data.in.EvalSeqSubject)[1]
Eval.Subjects.Prob.sequence=list()
for(i in 1:row.dim){
Eval.Subjects.Prob.sequence[[i]]=EvalSeq(init.train.weights.in.EvalSeqSubject,
init.test.data.in.EvalSeqSubject,
init.set.no.in.EvalSeqSubject,
i)
}
EvalSeq=function(train.weights.in, test.data.in, set.no.in, subject.no.in){
init.train.weights.in=train.weights.in
init.test.data.in=test.data.in
init.set.no.in=set.no.in
init.subject.no.in=subject.no.in
sub.Prob.sequence=list()
sub.Prob.sequence[[1]]=c(1/3,1/3,1/3)
sub.answer.sequence=init.test.data.in[init.subject.no.in, 4:12]
weight.col.index=c()
for(i in 1:9){
weight.col.index[i]=which(Anum==sub.answer.sequence[1,i])
}
for(i in 2:9){
sub.Prob.sequence[[i]]=c(
sub.Prob.sequence[[i-1]][1]*init.train.weights.in[[1]][1,weight.col.index[i-1]],
sub.Prob.sequence[[i-1]][2]*init.train.weights.in[[2]][1,weight.col.index[i-1]],
sub.Prob.sequence[[i-1]][3]*init.train.weights.in[[3]][1,weight.col.index[i-1]])
}
return(sub.Prob.sequence)
}
EvalSeqSubject=function(train.weights.in, test.data.in, set.no.in){
init.train.weights.in.EvalSeqSubject=train.weights.in
init.test.data.in.EvalSeqSubject=test.data.in
init.set.no.in.EvalSeqSubject=set.no.in
row.dim=dim(init.test.data.in.EvalSeqSubject)[1]
Eval.Subjects.Prob.sequence=list()
for(i in 1:row.dim){
Eval.Subjects.Prob.sequence[[i]]=EvalSeq(init.train.weights.in.EvalSeqSubject,
init.test.data.in.EvalSeqSubject,
init.set.no.in.EvalSeqSubject,
i)
}
return(Eval.Subjects.Prob.sequence)
}
CVdat=CVsplit(phq9Subset, N.set = 50)
train.weights.in=list()
for(i in 1:3){
train.weights.in[[i]]=round(ReformatWeights(PCVeval_overQnum(CVdat[[1]][[5]]))[[i]], digits = 4)
}
test.data.in = CVdat[[2]][[5]]
set.no.in = 5
init.train.weights.in.EvalSeqSubject=train.weights.in
init.test.data.in.EvalSeqSubject=test.data.in
init.set.no.in.EvalSeqSubject=set.no.in
row.dim=dim(init.test.data.in.EvalSeqSubject)[1]
Eval.Subjects.Prob.sequence=list()
for(i in 1:row.dim){
Eval.Subjects.Prob.sequence[[i]]=EvalSeq(init.train.weights.in.EvalSeqSubject,
init.test.data.in.EvalSeqSubject,
init.set.no.in.EvalSeqSubject,
i)
}
View(Eval.Subjects.Prob.sequence)
